<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pandas:新增行/列</title>
      <link href="/2020/07/06/Pandas-%E6%96%B0%E5%A2%9E%E8%A1%8C-%E5%88%97/"/>
      <url>/2020/07/06/Pandas-%E6%96%B0%E5%A2%9E%E8%A1%8C-%E5%88%97/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#新增行">新增行</a><ul><li><a href="#方法一通过lociloc">方法一：通过loc/iloc</a></li><li><a href="#方法二append">方法二：append</a></li><li><a href="#方法三concat">方法三：concat</a></li></ul></li><li><a href="#新增列">新增列</a><ul><li><a href="#方法一assign">方法一：assign</a></li></ul></li></ul><!-- tocstop --><blockquote><p><a href="https://blog.csdn.net/qq_36387683/article/details/86016913" target="_blank" rel="noopener">参考链接</a></p></blockquote><h1><span id="新增行">新增行</span></h1><h2><span id="方法一通过lociloc">方法一：通过loc/iloc</span></h2><p>如果我们是往已有的DataFrame中添加数据，而已有的DataFrame已经存在相同的index就会造成替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; DataFrame(columns&#x3D;(&#39;lib&#39;, &#39;qty1&#39;, &#39;qty2&#39;))</span><br><span class="line"></span><br><span class="line"># loc可以对没有的 index 进行赋值，而 iloc 则不允许，iloc只能对已经存在的位置进行操作。</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    df.loc[i] &#x3D; [randint(-1,1) for n in range(3)]</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 对于完整的自增索引，可以使用len(df)，在最后添加一行</span><br><span class="line"> </span><br><span class="line">for i in range(5):</span><br><span class="line">    df.loc[len(df)] &#x3D; [randint(-1,1) for n in range(3)]</span><br></pre></td></tr></table></figure><h2><span id="方法二append">方法二：append</span></h2><p>采用 append 的方法速度上比较快，而且可以避免index的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from numpy.random import randint</span><br><span class="line">df &#x3D; pd.DataFrame(columns&#x3D;(&#39;lib&#39;, &#39;qty1&#39;, &#39;qty2&#39;))</span><br><span class="line">for i in range(5):</span><br><span class="line">    s &#x3D; pd.Series(&#123;&#39;lib&#39;:randint(-1,1), &#39;qty1&#39;:randint(-1,1), &#39;qty2&#39;:randint(-1,1)&#125;)</span><br><span class="line">    </span><br><span class="line">    # 这里 Series 必须是 dict-like 类型</span><br><span class="line">    df &#x3D; df.append(s, ignore_index&#x3D;True)</span><br><span class="line">    # 这里必须选择ignore_index&#x3D;True 或者给 Series 一个index值</span><br><span class="line"> </span><br><span class="line">    #也可以直接填写字典格式进去</span><br><span class="line">    df &#x3D; df.append(&#123;&#39;lib&#39;:randint(-1,1), &#39;qty1&#39;:randint(-1,1), &#39;qty2&#39;:randint(-1,1)&#125;, ignore_index&#x3D;True)</span><br></pre></td></tr></table></figure><h2><span id="方法三concat">方法三：concat</span></h2><p>再定义一个dataframe，然后合并两个df</p><h1><span id="新增列">新增列</span></h1><h2><span id="方法一assign">方法一：assign</span></h2><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/06/15940487958378.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w684"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; pd.DataFrame(&#123;&#39;temp_c&#39;: [17.0, 25.0]&#125;,</span><br><span class="line">                   index&#x3D;[&#39;Portland&#39;,&#39;Berkeley&#39;])</span><br><span class="line"></span><br><span class="line">##########输出##########</span><br><span class="line">          temp_c</span><br><span class="line">Portland    17.0</span><br><span class="line">Berkeley    25.0</span><br><span class="line"></span><br><span class="line">df.assign(temp_f&#x3D;lambda x: x.temp_c * 9 &#x2F; 5 + 32)</span><br><span class="line"></span><br><span class="line">##########输出##########</span><br><span class="line">          temp_c  temp_f</span><br><span class="line">Portland    17.0    62.6</span><br><span class="line">Berkeley    25.0    77.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:字符串的比较</title>
      <link href="/2020/07/06/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2020/07/06/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#比较字符串是否相同">比较字符串是否相同</a></li><li><a href="#字符串的长度">字符串的长度</a></li><li><a href="#字符串运算符">字符串运算符</a></li><li><a href="#字符串格式化">字符串格式化</a></li><li><a href="#常用函数">常用函数</a></li></ul><!-- tocstop --><p><a href="https://www.cnblogs.com/jiyongjia/p/9539024.html" target="_blank" rel="noopener">参考链接1</a><br><a href="https://www.runoob.com/python3/python3-string.html" target="_blank" rel="noopener">参考链接2</a></p><h1><span id="比较字符串是否相同">比较字符串是否相同</span></h1><p>==: 来比较两个字符串内的value值是否相同<br>is：比较两个字符串的id值。</p><h1><span id="字符串的长度">字符串的长度</span></h1><p>len():显示字符串的长度，返回数字整型。可以进行长度的比较。</p><h1><span id="字符串运算符">字符串运算符</span></h1><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/06/15940478707235.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w685"></p><h1><span id="字符串格式化">字符串格式化</span></h1><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/06/15940479076673.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w671"><br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/06/15940479846165.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w688"></p><h1><span id="常用函数">常用函数</span></h1><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/06/15940480880304.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w683"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:训练模型存储</title>
      <link href="/2020/07/06/Python-%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E5%AD%98%E5%82%A8/"/>
      <url>/2020/07/06/Python-%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_34105362/article/details/97785684" target="_blank" rel="noopener">参考链接</a><br>因为文件的类型是字节bytes型的， 所以写入的模式必须是’wb’，读取是’rb’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import statsmodels.api as sm</span><br><span class="line">import pickle</span><br><span class="line"> </span><br><span class="line"># 训练模型</span><br><span class="line">model &#x3D; sm.OLS(y,X).fit()</span><br><span class="line"> </span><br><span class="line"># 保存本地</span><br><span class="line">filepath &#x3D; r&#39;model&#x2F;model.pkl&#39;</span><br><span class="line">with open(filepath, &#39;wb&#39;) as f:</span><br><span class="line">    pickle.dump(model, f)</span><br><span class="line"> </span><br><span class="line"># 从本地导入使用</span><br><span class="line">with open(filepath, &#39;rb&#39;) as f:</span><br><span class="line">    load_model &#x3D; pickle.load(f)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas:求最大值所在索引</title>
      <link href="/2020/07/06/Pandas-%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC%E6%89%80%E5%9C%A8%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/07/06/Pandas-%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC%E6%89%80%E5%9C%A8%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#行最大值所在列索引">行最大值所在列索引</a><ul><li><a href="#法一">法一</a></li></ul></li><li><a href="#法二">法二</a></li><li><a href="#列最大值所在行索引">列最大值所在行索引</a></li></ul><!-- tocstop --><h1><span id="行最大值所在列索引">行最大值所在列索引</span></h1><h2><span id="法一">法一</span></h2><p><a href="https://blog.csdn.net/weixin_37536446/article/details/82774659" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#将array转化为DataFrame</span><br><span class="line">arr&#x3D;pd.DataFrame(array,columns&#x3D;[&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;])</span><br><span class="line"></span><br><span class="line">#分别求行最大值及最大值所在索引</span><br><span class="line">arr[&#39;max_value&#39;]&#x3D;arr.max(axis&#x3D;1)</span><br><span class="line">arr[&#39;max_index&#39;]&#x3D;np.argmax(array,axis&#x3D;1)</span><br><span class="line"></span><br><span class="line">#得出如下结果：</span><br><span class="line">arr</span><br><span class="line">Out[28]: </span><br><span class="line">        one       two     three      four  max_index  max_value</span><br><span class="line">0  0.472888  0.239822  0.226140  0.061150          0   0.472888</span><br><span class="line">1  0.679696  0.114352  0.176473  0.029479          0   0.679696</span><br><span class="line">2  0.006214  0.016521  0.311172  0.666093          3   3.000000</span><br><span class="line">3  0.240934  0.236368  0.301138  0.221560          2   2.000000</span><br><span class="line">4  0.440936  0.224599  0.245160  0.089305          0   0.440936</span><br><span class="line">5  0.055403  0.100139  0.303618  0.540839          3   3.000000</span><br><span class="line">6  0.112219  0.756748  0.092371  0.038662          1   1.000000</span><br><span class="line">7  0.248853  0.282430  0.283122  0.185595          2   2.000000</span><br><span class="line">8  0.012052  0.037406  0.271065  0.679477          3   3.000000</span><br></pre></td></tr></table></figure><h1><span id="法二">法二</span></h1><p>得到某一行最大值的列索引：<a href="https://blog.csdn.net/weixin_39129504/article/details/88561602" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># create a dataframe</span><br><span class="line">table &#x3D; pd.DataFrame([[1,6],[4,5],[5,8]],index&#x3D;[&quot;s1&quot;, &quot;s2&quot;, &quot;s3&quot;], columns&#x3D;[&quot;a1&quot;,&quot;a2&quot;])</span><br><span class="line"></span><br><span class="line"># 获得 s1 行</span><br><span class="line">s1 &#x3D; table.loc[&quot;s1&quot;,:]</span><br><span class="line"></span><br><span class="line"># 获得 s1 中最大值的索引，可能有多个</span><br><span class="line">s1_argmax &#x3D; s1[s1 &#x3D;&#x3D; s1.max()].index</span><br><span class="line"></span><br><span class="line"># randomly choose 1 index</span><br><span class="line"># s1_argmax &#x3D; np.random.choice(s1_argmax)</span><br></pre></td></tr></table></figure><h1><span id="列最大值所在行索引">列最大值所在行索引</span></h1><p><a href="https://blog.csdn.net/oYeZhou/article/details/82378160" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data &#x3D; &#123;&#39;year&#39;:[2016,2016,2017,2017,2017,2018,2018],</span><br><span class="line">        &#39;num&#39;:[2,5,4,7,8,90,78],</span><br><span class="line">        &#39;name&#39;:[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;]&#125;</span><br><span class="line"> </span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"> ##########输出##########</span><br><span class="line">yearnumname</span><br><span class="line">020162a</span><br><span class="line">120165b</span><br><span class="line">220174c</span><br><span class="line">320177d</span><br><span class="line">420178e</span><br><span class="line">5201890f</span><br><span class="line">6201878g</span><br><span class="line"> </span><br><span class="line">df_groupby &#x3D; df[[&#39;year&#39;,&#39;num&#39;]].groupby(by&#x3D;&#39;year&#39;,as_index&#x3D;False).max()</span><br><span class="line"></span><br><span class="line"> ##########输出##########</span><br><span class="line"> yearnum</span><br><span class="line">020165</span><br><span class="line">120178</span><br><span class="line">2201890</span><br><span class="line"> </span><br><span class="line">df_merge &#x3D; pd.merge(df_groupby,df,on&#x3D;[&#39;year&#39;,&#39;num&#39;],how&#x3D;&#39;left&#39;)</span><br><span class="line"></span><br><span class="line">  ##########输出##########</span><br><span class="line">yearnumname</span><br><span class="line">020165b</span><br><span class="line">120178e</span><br><span class="line">2201890f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas:Dataframe数据筛选</title>
      <link href="/2020/07/06/Pandas-%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AD%9B%E9%80%89/"/>
      <url>/2020/07/06/Pandas-%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AD%9B%E9%80%89/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#选取删除某列含某值的行">选取/删除某列含某值的行</a></li><li><a href="#选取删除某行含某值的列">选取/删除某行含某值的列</a></li><li><a href="#filter函数">filter函数</a></li><li><a href="#query函数">query函数</a></li></ul><!-- tocstop --><h1><span id="选取删除某列含某值的行">选取/删除某列含某值的行</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a&#x3D;np.array([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">df1&#x3D;pd.DataFrame(a,index&#x3D;[&#39;row0&#39;,&#39;row1&#39;,&#39;row2&#39;],columns&#x3D;list(&#39;ABC&#39;))</span><br><span class="line">print(df1)</span><br><span class="line"> </span><br><span class="line">#选取df1中A列包含数字1的行</span><br><span class="line">#df1&#x3D;df1[df1[&#39;A&#39;].isin([1])]</span><br><span class="line">#df1[df1[&#39;A&#39;].isin([1])] </span><br><span class="line"></span><br><span class="line">#通过~取反，删除A列中包含数字1的行</span><br><span class="line">df1&#x3D;df1[~df1[&#39;A&#39;].isin([1])]</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">##########输出##########</span><br><span class="line">      A  B  C</span><br><span class="line">row0  1  2  3</span><br><span class="line">row1  4  5  6</span><br><span class="line">row2  7  8  9</span><br><span class="line">      A  B  C</span><br><span class="line">row1  4  5  6</span><br><span class="line">row2  7  8  9</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h1><span id="选取删除某行含某值的列">选取/删除某行含某值的列</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">a&#x3D;np.array([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">df2&#x3D;pd.DataFrame(a,index&#x3D;[&#39;row0&#39;,&#39;row1&#39;,&#39;row2&#39;],columns&#x3D;list(&#39;ABC&#39;))</span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">#利用enumerate对row0进行遍历，将含有数字3的列放入cols中</span><br><span class="line">cols&#x3D;[x for i,x in enumerate(df2.columns) if df2.iat[0,i]&#x3D;&#x3D;3]</span><br><span class="line">print(cols)</span><br><span class="line"> </span><br><span class="line"># 选取含有特定数值的列</span><br><span class="line">df2&#x3D;df2[cols]   </span><br><span class="line"># 删除含有特定数值的列删除</span><br><span class="line">#df2&#x3D;df2.drop(cols,axis&#x3D;1) </span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">##########输出##########</span><br><span class="line"></span><br><span class="line">      A  B  C</span><br><span class="line">row0  1  2  3</span><br><span class="line">row1  4  5  6</span><br><span class="line">row2  7  8  9</span><br><span class="line"></span><br><span class="line">[&#39;C&#39;]</span><br><span class="line">      C</span><br><span class="line">row0  3</span><br><span class="line">row1  6</span><br><span class="line">row2  9</span><br></pre></td></tr></table></figure><h1><span id="filter函数">filter函数</span></h1><p>根据column name / index 筛选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),</span><br><span class="line">                  index&#x3D;[&#39;mouse&#39;, &#39;rabbit&#39;],</span><br><span class="line">                  columns&#x3D;[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;])</span><br><span class="line"># select columns by name</span><br><span class="line">df.filter(items&#x3D;[&#39;one&#39;, &#39;three&#39;])</span><br><span class="line">##########输出##########</span><br><span class="line">         one  three</span><br><span class="line">mouse     1      3</span><br><span class="line">rabbit    4      6</span><br><span class="line"></span><br><span class="line"># select columns by regular expression</span><br><span class="line">df.filter(regex&#x3D;&#39;e$&#39;, axis&#x3D;1)</span><br><span class="line">##########输出##########</span><br><span class="line">         one  three</span><br><span class="line">mouse     1      3</span><br><span class="line">rabbit    4      6</span><br><span class="line"></span><br><span class="line"># select rows containing &#39;bbi&#39;</span><br><span class="line">df.filter(like&#x3D;&#39;bbi&#39;, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">##########输出##########</span><br><span class="line">         one  two  three</span><br><span class="line">rabbit    4    5      6</span><br></pre></td></tr></table></figure><h1><span id="query函数">query函数</span></h1><p>通过boolean表达式，筛选特定行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; pd.DataFrame(&#123;&#39;A&#39;: range(1, 6),</span><br><span class="line">                   &#39;B&#39;: range(10, 0, -2),</span><br><span class="line">                   &#39;C C&#39;: range(10, 5, -1)&#125;)</span><br><span class="line">##########输出##########</span><br><span class="line">   A   B  C C</span><br><span class="line">0  1  10   10</span><br><span class="line">1  2   8    9</span><br><span class="line">2  3   6    8</span><br><span class="line">3  4   4    7</span><br><span class="line">4  5   2    6</span><br><span class="line"></span><br><span class="line">df.query(&#39;A &gt; B&#39;)</span><br><span class="line">##########输出##########</span><br><span class="line">   A  B  C C</span><br><span class="line">4  5  2    6</span><br><span class="line"></span><br><span class="line">df.query(&#39;B &#x3D;&#x3D; &#96;C C&#96;&#39;)</span><br><span class="line">##########输出##########</span><br><span class="line">   A   B  C C</span><br><span class="line">0  1  10   10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas:groupby函数</title>
      <link href="/2020/07/04/Pandas-groupby%E5%87%BD%E6%95%B0/"/>
      <url>/2020/07/04/Pandas-groupby%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="https://blog.csdn.net/wuzhongqiang/article/details/104714458" target="_blank" rel="noopener">https://blog.csdn.net/wuzhongqiang/article/details/104714458</a></p></blockquote><p>groupby()对数据按照某一标准进行分组，然后进行一些统计。任何groupby操作都会涉及到下面的三个操作之一：</p><ul><li>Splitting：分割数据</li><li>Applying：应用一个函数</li><li>Combining:合并结果</li></ul><p>在许多情况下，我们将数据分成几组，并在每个子集上应用一些功能。在应用中，我们可以执行以下操作：</p><ul><li>Aggregation ：计算一些摘要统计</li><li>Transformation ：执行一些特定组的操作</li><li>Filtration：根据某些条件下丢弃数据<a id="more"></a></li></ul><p>例如，有如下dataframe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipl_data &#x3D; &#123;&#39;Team&#39;: [&#39;Riders&#39;, &#39;Riders&#39;, &#39;Devils&#39;, &#39;Devils&#39;, &#39;Kings&#39;,</span><br><span class="line">         &#39;kings&#39;, &#39;Kings&#39;, &#39;Kings&#39;, &#39;Riders&#39;, &#39;Royals&#39;, &#39;Royals&#39;, &#39;Riders&#39;],</span><br><span class="line">         &#39;Rank&#39;: [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],</span><br><span class="line">         &#39;Year&#39;: [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],</span><br><span class="line">         &#39;Points&#39;:[876,789,863,673,741,812,756,788,694,701,804,690]&#125;</span><br><span class="line">df &#x3D; pd.DataFrame(ipl_data)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/04/15938329696990.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w245"></p><h2><span id="分割对象">分割对象</span></h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.groupby(‘key’)</span><br><span class="line">obj.groupby([‘key1’,‘key2’])</span><br><span class="line">obj.groupby(key,axis&#x3D;1)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># 按照单列进行分组</span><br><span class="line">&gt;&gt;&gt; df.groupby(&#39;Year&#39;).groups</span><br><span class="line">Out:</span><br><span class="line">&#123;2014: Int64Index([0, 2, 4, 9], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> 2015: Int64Index([1, 3, 5, 10], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> 2016: Int64Index([6, 8], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> 2017: Int64Index([7, 11], dtype&#x3D;&#39;int64&#39;)&#125;</span><br><span class="line"></span><br><span class="line"># 按照多列进行分组</span><br><span class="line">&gt;&gt;&gt; df.groupby([&#39;Year&#39;,&#39;Rank&#39;]).groups</span><br><span class="line">Out:</span><br><span class="line">&#123;(2014, 1): Int64Index([0], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2014, 2): Int64Index([2], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2014, 3): Int64Index([4], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2014, 4): Int64Index([9], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2015, 1): Int64Index([10], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2015, 2): Int64Index([1], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2015, 3): Int64Index([3], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2015, 4): Int64Index([5], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2016, 1): Int64Index([6], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2016, 2): Int64Index([8], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2017, 1): Int64Index([7], dtype&#x3D;&#39;int64&#39;),</span><br><span class="line"> (2017, 2): Int64Index([11], dtype&#x3D;&#39;int64&#39;)&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 放入list容器</span><br><span class="line">&gt;&gt;&gt; list(df.groupby(&#39;Year&#39;))</span><br><span class="line">Out:</span><br><span class="line">[(2014,</span><br><span class="line">       Team  Rank  Year  Points</span><br><span class="line">  0  Riders     1  2014     876</span><br><span class="line">  2  Devils     2  2014     863</span><br><span class="line">  4   Kings     3  2014     741</span><br><span class="line">  9  Royals     4  2014     701),</span><br><span class="line"> (2015,</span><br><span class="line">        Team  Rank  Year  Points</span><br><span class="line">  1   Riders     2  2015     789</span><br><span class="line">  3   Devils     3  2015     673</span><br><span class="line">  5    kings     4  2015     812</span><br><span class="line">  10  Royals     1  2015     804),</span><br><span class="line"> (2016,</span><br><span class="line">       Team  Rank  Year  Points</span><br><span class="line">  6   Kings     1  2016     756</span><br><span class="line">  8  Riders     2  2016     694),</span><br><span class="line"> (2017,</span><br><span class="line">        Team  Rank  Year  Points</span><br><span class="line">  7    Kings     1  2017     788</span><br><span class="line">  11  Riders     2  2017     690)]</span><br><span class="line"></span><br><span class="line"> # 获取某一分组</span><br><span class="line">&gt;&gt;&gt; grouped &#x3D; df.groupby(&#39;Year&#39;)</span><br><span class="line">&gt;&gt;&gt; print(grouped.get_group(2014))</span><br><span class="line">Out：</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">0  Riders     1  2014     876</span><br><span class="line">2  Devils     2  2014     863</span><br><span class="line">4   Kings     3  2014     741</span><br><span class="line">9  Royals     4  2014     701</span><br></pre></td></tr></table></figure><h2><span id="aggregation操作">Aggregation操作</span></h2><p>聚合函数返回每个组的单个聚合值。一旦创建了group by对象，就可以对分组数据执行多个聚合操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;agg方法实现聚合, 相比于apply，可以同时传入多个统计函数&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 针对同一列使用不同的统计方法 </span><br><span class="line">grouped &#x3D; df.groupby(&#39;Year&#39;, as_index&#x3D;False)    # 这个as_index属性，如果是False，就是SQL风格的统计输出，如果是True，默认第一列变成了索引</span><br><span class="line">print(grouped[&#39;Points&#39;].agg(&#123;&#39;mean&#39;:np.mean, &#39;std&#39;:np.std, &#39;max&#39;:np.max&#125;))</span><br><span class="line"></span><br><span class="line"># 针对不同的列使用不同的统计方法</span><br><span class="line">print(grouped.agg(&#123;&#39;Points&#39;:[np.mean, &#39;sum&#39;], &#39;Rank&#39;:[np.max]&#125;))</span><br><span class="line"></span><br><span class="line"># 使用apply的话</span><br><span class="line">print(grouped[&#39;Points&#39;].apply(np.mean))</span><br><span class="line">grouped.apply(lambda x: print(x))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;查看每个组大小的另一种方法是应用size()函数&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">grouped &#x3D; df.groupby(&#39;Team&#39;)</span><br><span class="line">print(grouped.size())</span><br><span class="line">print(grouped.count())</span><br><span class="line">print(grouped.agg(np.size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 结果：</span><br><span class="line">Team</span><br><span class="line">Devils    2</span><br><span class="line">Kings     3</span><br><span class="line">Riders    4</span><br><span class="line">Royals    2</span><br><span class="line">kings     1</span><br><span class="line">dtype: int64</span><br><span class="line">        Rank  Year  Points</span><br><span class="line">Team                      </span><br><span class="line">Devils     2     2       2</span><br><span class="line">Kings      3     3       3</span><br><span class="line">Riders     4     4       4</span><br><span class="line">Royals     2     2       2</span><br><span class="line">kings      1     1       1</span><br><span class="line">        Rank  Year  Points</span><br><span class="line">Team                      </span><br><span class="line">Devils     2     2       2</span><br><span class="line">Kings      3     3       3</span><br><span class="line">Riders     4     4       4</span><br><span class="line">Royals     2     2       2</span><br><span class="line">kings      1     1       1</span><br></pre></td></tr></table></figure><h2><span id="transformations">Transformations</span></h2><p>tranform()会把 func 参数应用到所有分组，然后把结果放置到原数组的 index 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">grouped &#x3D; df.groupby(&#39;Team&#39;)</span><br><span class="line">score &#x3D; lambda x: x - x.mean()</span><br><span class="line">print(grouped.transform(score))   # 应用于原数组的index上</span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">       Rank     Year    Points</span><br><span class="line">0  -0.75000 -1.50000 113.75000</span><br><span class="line">1   0.25000 -0.50000  26.75000</span><br><span class="line">2  -0.50000 -0.50000  95.00000</span><br><span class="line">3   0.50000  0.50000 -95.00000</span><br><span class="line">4   1.33333 -1.66667 -20.66667</span><br><span class="line">5   0.00000  0.00000   0.00000</span><br><span class="line">6  -0.66667  0.33333  -5.66667</span><br><span class="line">7  -0.66667  1.33333  26.33333</span><br><span class="line">8   0.25000  0.50000 -68.25000</span><br><span class="line">9   1.50000 -0.50000 -51.50000</span><br><span class="line">10 -1.50000  0.50000  51.50000</span><br><span class="line">11  0.25000  1.50000 -72.25000</span><br></pre></td></tr></table></figure><h3><span id="applyaggtransform区别">apply/agg/transform区别</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 这里可以看出这三者的区别： </span><br><span class="line">print(grouped.transform(lambda x: print(x)))    </span><br><span class="line">print(grouped.agg(lambda x: print(x)))</span><br><span class="line">print(grouped.apply(lambda x: print(x)))</span><br></pre></td></tr></table></figure><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/04/15938364985352.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w372"><br>apply()处理的对象是groupby后的子对象，一个个的类如DataFrame的数据表<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/04/15938364029777.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w470"><br>agg()则每次只传入整个dataframe的一列,从列的角度进行输出。<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/04/15938364330984.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w419"></p><p>transform()是对每一个类似Dataframe的子对象按列输出<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/07/04/15938364596851.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w388"></p><h2><span id="filtration">Filtration</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">grouped.size()   # 看一下分组后每个队的个数</span><br><span class="line">## 结果</span><br><span class="line">Team</span><br><span class="line">Devils    2</span><br><span class="line">Kings     3</span><br><span class="line">Riders    4</span><br><span class="line">Royals    2</span><br><span class="line">kings     1</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"># 过滤到个数小于3的队伍</span><br><span class="line">print(df.groupby(&#39;Team&#39;).filter(lambda x: len(x) &gt;&#x3D; 3))</span><br><span class="line"></span><br><span class="line">## 结果：</span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">4    Kings     3  2014     741</span><br><span class="line">6    Kings     1  2016     756</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">11  Riders     2  2017     690</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:常用函数</title>
      <link href="/2020/07/04/Python-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2020/07/04/Python-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#map">map()</a></li></ul><!-- tocstop --><h1><span id="map">map()</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br><span class="line"># function:映射操作的函数</span><br><span class="line"># iterable：一个或多个可迭代序列</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;def square(x) :            # 计算平方数</span><br><span class="line">...     return x ** 2</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; map(square, [1,2,3,4,5])   # 计算列表各个元素的平方</span><br><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line">&gt;&gt;&gt; map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数</span><br><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line"> </span><br><span class="line"># 提供了两个列表，对相同位置的列表数据进行相加</span><br><span class="line">&gt;&gt;&gt; map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</span><br><span class="line">[3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas:apply,applymap,map</title>
      <link href="/2020/07/04/Python-apply-applymap-map/"/>
      <url>/2020/07/04/Python-apply-applymap-map/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接:<a href="https://stackoverflow.com/questions/19798153/difference-between-map-applymap-and-apply-methods-in-pandas" target="_blank" rel="noopener">https://stackoverflow.com/questions/19798153/difference-between-map-applymap-and-apply-methods-in-pandas</a></p></blockquote><h1><span id="apply">apply()</span></h1><p>当想让方程作用每一个一维向量，可以使用apply来完成，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [116]: frame &#x3D; DataFrame(np.random.randn(4, 3), columns&#x3D;list(&#39;bde&#39;), index&#x3D;[&#39;Utah&#39;, &#39;Ohio&#39;, &#39;Texas&#39;, &#39;Oregon&#39;])</span><br><span class="line"></span><br><span class="line">In [117]: frame</span><br><span class="line">Out[117]: </span><br><span class="line">               b         d         e</span><br><span class="line">Utah   -0.029638  1.081563  1.280300</span><br><span class="line">Ohio    0.647747  0.831136 -1.549481</span><br><span class="line">Texas   0.513416 -0.884417  0.195343</span><br><span class="line">Oregon -0.485454 -0.477388 -0.309548</span><br><span class="line"></span><br><span class="line">In [118]: f &#x3D; lambda x: x.max() - x.min()</span><br><span class="line"></span><br><span class="line">In [119]: frame.apply(f)</span><br><span class="line">Out[119]: </span><br><span class="line">b    1.133201</span><br><span class="line">d    1.965980</span><br><span class="line">e    2.829781</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><a id="more"></a><h1><span id="applymap">applymap()</span></h1><p>让方程作用于DataFrame中的每一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [120]: format &#x3D; lambda x: &#39;%.2f&#39; % x</span><br><span class="line"></span><br><span class="line">In [121]: frame.applymap(format)</span><br><span class="line">Out[121]: </span><br><span class="line">            b      d      e</span><br><span class="line">Utah    -0.03   1.08   1.28</span><br><span class="line">Ohio     0.65   0.83  -1.55</span><br><span class="line">Texas    0.51  -0.88   0.20</span><br><span class="line">Oregon  -0.49  -0.48  -0.31</span><br></pre></td></tr></table></figure><h1><span id="map">map()</span></h1><p>将函数作用于一个Series的每一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [122]: frame[&#39;e&#39;].map(format)</span><br><span class="line">Out[122]: </span><br><span class="line">Utah       1.28</span><br><span class="line">Ohio      -1.55</span><br><span class="line">Texas      0.20</span><br><span class="line">Oregon    -0.31</span><br><span class="line">Name: e, dtype: object</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2020/07/03/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/07/03/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#简介">简介</a><ul><li><a href="#内嵌html语法">内嵌HTML语法</a></li><li><a href="#特殊字符的转义">特殊字符的转义</a></li></ul></li><li><a href="#行内语法">行内语法</a><ul><li><a href="#注释">注释</a></li><li><a href="#多级标题">多级标题</a></li><li><a href="#字的样式">字的样式</a></li><li><a href="#转义字符">转义字符</a></li><li><a href="#超链接">超链接</a></li><li><a href="#列表">列表</a></li><li><a href="#多级引用">多级引用</a></li></ul></li><li><a href="#块语法">块语法</a><ul><li><a href="#内容目录">内容目录</a></li><li><a href="#代码块">代码块</a><ul><li><a href="#流程图">流程图</a></li></ul></li><li><a href="#表格">表格</a></li><li><a href="#分割线">分割线</a></li><li><a href="#latex公式">LaTex公式</a></li></ul></li></ul><!-- tocstop --><blockquote><p>参考链接：<a href="https://www.jianshu.com/p/ebe52d2d468f" target="_blank" rel="noopener">https://www.jianshu.com/p/ebe52d2d468f</a></p></blockquote><h1><span id="简介">简介</span></h1><h2><span id="内嵌html语法">内嵌HTML语法</span></h2><blockquote><p>HTML 是一种发布格式，Markdown 是一种创作格式。<br>Markdown语法集合比较小，只是HTML标签的一小部分。<br>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&lt;a&gt;</code> 标签替代 Markdown 的链接语法。</p></blockquote><h2><span id="特殊字符的转义">特殊字符的转义</span></h2><blockquote><p>在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&amp;lt</code>; 和 <code>&amp;amp</code>;。</p></blockquote><a id="more"></a><h1><span id="行内语法">行内语法</span></h1><h2><span id="注释">注释</span></h2><ul><li><p>html注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 快捷键command+&#x2F;</span><br><span class="line">&lt;!--不会显示在网页--&gt;</span><br></pre></td></tr></table></figure><p>效果：<!--haha--></p></li><li><p>hack方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x2F;&#x2F;]: # (注释内容)</span><br></pre></td></tr></table></figure><p>效果： </p></li></ul><h2><span id="多级标题">多级标题</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题  &lt;!--最多6级标题--&gt;</span><br></pre></td></tr></table></figure><h2><span id="字的样式">字的样式</span></h2><ol><li>字形<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br><span class="line">&#x3D;&#x3D;背景高亮&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>效果：</li></ol><p><em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del><br>==背景高亮==</p><ol><li>颜色/字号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color&#x3D;gray size&#x3D;5&gt;gray&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;#00ffff size&#x3D;3&gt;null&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>效果：<br><font color="gray" size="5">gray</font><br><font color="#00ffff" size="3">null</font></li><li>字体<br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font></li></ol><h2><span id="转义字符">转义字符</span></h2><blockquote><p>Markdown里的转义字符为 / </p><blockquote><p>需要转义的有</p><blockquote><p>\ 反斜杠 ` 反引号 * 星号 _ 下划线 {} 大括号 [] 中括号 () 小括号  # 井号 + 加号 - 减号 . 英文句号 ! 感叹号</p></blockquote></blockquote></blockquote><h2><span id="超链接">超链接</span></h2><ul><li>行内式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># [链接文字]（具体链接 “title”）</span><br><span class="line"># title就是鼠标悬停在链接上显示的字</span><br><span class="line">[百度一下](https:&#x2F;&#x2F;www.baidu.com &quot;baidu&quot;)</span><br></pre></td></tr></table></figure><p>效果：<a href="https://www.baidu.com" target="_blank" rel="noopener" title="baidu">百度一下</a></p><ul><li><p>参考式<br>常用于文章多处引用同一链接，分为两部分：</p><ol><li><p>在需要引用链接的地方：<code>[链接文字][链接标记]</code></p></li><li><p>在文章的任意地方标明：<code>[链接标记][具体链接]</code></p><ol><li>多放在文章末尾</li></ol><p>效果：<br>我经常访问<a href="http://www.google.com" target="_blank" rel="noopener">Google</a>    </p></li></ol></li></ul><ul><li>脚注(HEXO原生不支持)<br>脚注内容自动显示在文章末尾<br>效果：使用 Markdown<a href="Markdown是一种纯文本标记语言">^1</a>可以效率的书写文档, 直接转换成 HTML[^2]</li></ul><p>[^2]: HyperText Markup Language 超文本标记语言</p><ul><li>自动链接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure>效果：&lt;<a href="mailto:address@example.com">address@example.com</a>&gt;</li></ul><h2><span id="列表">列表</span></h2><ol><li><p>无序列表<code>* + -</code></p><ul><li>效果：<ul><li>1<ul><li>2</li></ul></li></ul></li></ul></li><li><p>有序列表<code>1. 2. .....</code></p></li><li><p>定义型列表</p><blockquote><p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:   轻量级文本标记语言</span><br></pre></td></tr></table></figure><blockquote><p>MWeb不支持</p></blockquote></li><li><p>任务列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 下面三个元素之间有空格</span><br><span class="line">+&#x2F;- [] 任务名称</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><input disabled type="checkbox"> 任务一</li><li><input checked disabled type="checkbox"> 任务二</li></ul></li></ol><h2><span id="多级引用">多级引用</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第一级</p><blockquote><p>第二级</p><blockquote><p>第三级</p></blockquote></blockquote></blockquote><h1><span id="块语法">块语法</span></h1><h2><span id="内容目录">内容目录</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一般情况</span><br><span class="line">[TOC]</span><br><span class="line"># hexo发布文章</span><br><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><h2><span id="代码块">代码块</span></h2><ul><li><p>行内式子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;printf()&#96;</span><br></pre></td></tr></table></figure><p>效果：<code>printf()</code></p></li><li><p>多行代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上下各三个</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 画图</span><br><span class="line">### 顺序图</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>效果：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3><span id="流程图">流程图</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><h2><span id="表格">表格</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一|第二|第三</span><br><span class="line">---:|:---|:---:</span><br><span class="line">hello,it&#39;s me| hello,it&#39;s me| hello,it&#39;s me</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">第一</th><th align="left">第二</th><th align="center">第三</th></tr></thead><tbody><tr><td align="right">hello,it’s me</td><td align="left">hello,it’s me</td><td align="center">hello,it’s me</td></tr></tbody></table><p>第一行：列名<br>第二行：格式</p><ul><li>左对齐：<code>:</code>在左边</li><li>右对齐：<code>:</code>在右边</li><li>中间对齐：<code>:</code>在两边</li></ul><p>第三行：具体内容</p><h2><span id="分割线">分割线</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> #效果相同</span><br><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><hr><h2><span id="latex公式">LaTex公式</span></h2><ol><li>行内公式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 公式 $</span><br></pre></td></tr></table></figure>效果：$X+Y=Z$</li><li>整行公式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ 公式 $$</span><br></pre></td></tr></table></figure>效果：$$ X+Y=Z $$ </li><li>关于数学公式的书写：<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用</title>
      <link href="/2020/07/03/Hexo%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/03/Hexo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#基本指令">基本指令</a><ul><li><a href="#创建一篇新文章页面">创建一篇新文章/页面</a></li><li><a href="#本地查看">本地查看</a></li><li><a href="#清空public文件夹">清空public文件夹</a></li><li><a href="#生成网站静态文件">生成网站静态文件</a></li><li><a href="#部署网站">部署网站</a></li><li><a href="#发布到github">发布到GitHub</a></li></ul></li></ul><!-- tocstop --><h1><span id="基本指令">基本指令</span></h1><p>在对网站进行操作之前,在终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;kira&#x2F;网站所在文件夹</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="创建一篇新文章页面">创建一篇新文章/页面</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一篇新文章</span><br><span class="line">hexo new post 文章名称</span><br><span class="line"># 创建一个新页面</span><br><span class="line">hexo new page 页面名称</span><br></pre></td></tr></table></figure><p>文章默认保存在： 博客根目录<code>/source/_post/</code></p><h2><span id="本地查看">本地查看</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2><span id="清空public文件夹">清空public文件夹</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2><span id="生成网站静态文件">生成网站静态文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成后网页将会放在根目录下面的<code>public</code>文件夹里</p><h2><span id="部署网站">部署网站</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这个命令用来部署网站，使用此命令将会把生成好的页面（即<code>public</code>文件夹里的内容）部署到指定的地方上。</p><h2><span id="发布到github">发布到GitHub</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:解包与打包</title>
      <link href="/2020/07/03/Python-%E8%A7%A3%E5%8C%85%E4%B8%8E%E6%89%93%E5%8C%85/"/>
      <url>/2020/07/03/Python-%E8%A7%A3%E5%8C%85%E4%B8%8E%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#python-解包与打包">Python: 解包与打包</a><ul><li><a href="#解包">解包</a></li><li><a href="#打包">打包</a></li><li><a href="#打包和解包混合">打包和解包混合</a></li><li><a href="#_的用法"><code>_</code>的用法</a></li><li><a href="#的使用"><code>*</code>的使用</a><ul><li><a href="#用于表示多个数值">用于表示多个数值</a></li><li><a href="#用于表示可变参数">用于表示可变参数</a></li><li><a href="#用于表示关键字参数">用于表示关键字参数</a></li></ul></li><li><a href="#解包作为参数传到函数中">解包作为参数传到函数中</a></li><li><a href="#多返回值函数">多返回值函数</a></li></ul></li></ul><!-- tocstop --><blockquote><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/33896402" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33896402</a></p></blockquote><h1><span id="python-解包与打包">Python: 解包与打包</span></h1><h2><span id="解包">解包</span></h2><blockquote><p>一个list是一个整体，想把list中每个元素当成一个个个体剥离出来，这个过程就是解包<br>可迭代对象都可以解包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 列表</span><br><span class="line">&gt;&gt;&gt; a,b,c &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;a&#39;</span><br><span class="line"></span><br><span class="line"># 元组</span><br><span class="line">&gt;&gt;&gt; a,b,c &#x3D; (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span><br><span class="line">&gt;&gt;&gt; a</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="打包">打包</span></h2><blockquote><p>打包是解包的逆过程，通过zip函数实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; for i in zip(a, b):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">(&#39;a&#39;, 1)</span><br><span class="line">(&#39;b&#39;, 2)</span><br><span class="line">(&#39;c&#39;, 3)</span><br></pre></td></tr></table></figure><h2><span id="打包和解包混合">打包和解包混合</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; for i, j in zip(a, b):</span><br><span class="line">...     print(i+j)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><ul><li>先是zip函数将a b压包成为一个可迭代对象</li><li>对可迭代对象的每一个元素进行解包<code>（i, j = (0, 1)）</code>,此时就可以分别调用i j变量进行计算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; l &#x3D; [(&#39;Bob&#39;, &#39;1990-1-1&#39;, 60),</span><br><span class="line">...     (&#39;Mary&#39;, &#39;1996-1-4&#39;, 50),</span><br><span class="line">...     (&#39;Nancy&#39;, &#39;1993-3-1&#39;, 55),]</span><br><span class="line">&gt;&gt;&gt; for name, *args in l:</span><br><span class="line">...     print(name, args)</span><br><span class="line">...</span><br><span class="line">Bob [&#39;1990-1-1&#39;, 60]</span><br><span class="line">Mary [&#39;1996-1-4&#39;, 50]</span><br><span class="line">Nancy [&#39;1993-3-1&#39;, 55]</span><br></pre></td></tr></table></figure><ul><li><code>*</code>代表多个变量</li></ul><h2><span id="_的用法"><code>_</code>的用法</span></h2><p>当一些元素不用时，用<code>_</code>表示是更好的写法，可以让读代码的人知道这个元素是不要的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; person &#x3D; (&#39;Bob&#39;, 20, 50, (11, 20, 2000))</span><br><span class="line">&gt;&gt;&gt; name, *_, (*_, year) &#x3D; person</span><br><span class="line">&gt;&gt;&gt; name</span><br><span class="line">&#39;Bob&#39;</span><br><span class="line">&gt;&gt;&gt; year</span><br><span class="line">2000</span><br></pre></td></tr></table></figure><h2><span id="的使用"><code>*</code>的使用</span></h2><h3><span id="用于表示多个数值">用于表示多个数值</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; first, *new, last &#x3D; [94, 85, 73, 46]</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[85, 73]</span><br></pre></td></tr></table></figure><h3><span id="用于表示可变参数">用于表示可变参数</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def myfun(*num):</span><br><span class="line">...     print(num)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; myfun(1,2,5,6)</span><br><span class="line">(1, 2, 5, 6)</span><br></pre></td></tr></table></figure><p>参数用<code>*num</code>表示，num变量就可以当成元组调用了。<br>其实这个过程相当于<code>*num, = 1,2,5,6</code></p><h3><span id="用于表示关键字参数">用于表示关键字参数</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def myfun(**kw):</span><br><span class="line">...     print(kw)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; myfun(name &#x3D; &quot;Bob&quot;, age &#x3D; 20, weight &#x3D; 50)</span><br><span class="line">&#123;&#39;weight&#39;: 50, &#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 20&#125;</span><br></pre></td></tr></table></figure><p>键值对传入<code>**kw</code>，kw就可以表示相应字典。<br><code>**</code>的用法只在函数定义中使用</p><h2><span id="解包作为参数传到函数中">解包作为参数传到函数中</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def myfun(a, b):</span><br><span class="line">    print(a + b)</span><br><span class="line"></span><br><span class="line"># 列表的解包</span><br><span class="line">&gt;&gt;&gt; n &#x3D; [1, 2]</span><br><span class="line">&gt;&gt;&gt; myfun(*n)</span><br><span class="line">3</span><br><span class="line"># 字典的解包</span><br><span class="line">&gt;&gt;&gt; mydict &#x3D; &#123;&#39;a&#39;:1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; myfun(**mydict)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; myfun(*mydict)</span><br><span class="line">ba</span><br><span class="line"></span><br><span class="line">#一个应用</span><br><span class="line">&gt;&gt;&gt; bob &#x3D; &#123;&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 30&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;name&#125;&#39;s age is &#123;age&#125;&quot;.format(**bob)</span><br><span class="line">&quot;Bob&#39;s age is 30&quot;</span><br></pre></td></tr></table></figure><h2><span id="多返回值函数">多返回值函数</span></h2><p>也涉及解包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def myfun(a, b):</span><br><span class="line">    return a + 1, b + 2</span><br><span class="line">&gt;&gt;&gt; m, n &#x3D; myfun(1, 2)</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; n</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; p &#x3D; myfun(1, 2)</span><br><span class="line">&gt;&gt;&gt; p</span><br><span class="line">(2, 4)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Causal Bayesian Network</title>
      <link href="/2020/06/20/Causal-Bayesian-Network/"/>
      <url>/2020/06/20/Causal-Bayesian-Network/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#bayesian-network">Bayesian Network</a><ul><li><a href="#贝叶斯定理">贝叶斯定理</a></li><li><a href="#引入贝叶斯网络的原因">引入贝叶斯网络的原因</a></li><li><a href="#贝叶斯网络解决的问题">贝叶斯网络解决的问题</a></li><li><a href="#贝叶斯网络的相关定义及特性">贝叶斯网络的相关定义及特性</a><ul><li><a href="#markov-parents">Markov parents</a></li><li><a href="#markov-compatibility">Markov Compatibility</a></li><li><a href="#parental-markov-condition">Parental Markov Condition</a></li><li><a href="#ordered-markov-condition">Ordered Markov Condition</a></li><li><a href="#observational-equivalence">Observational Equivalence</a></li><li><a href="#techniques-for-calculation">Techniques for calculation</a></li><li><a href="#independency-in-bn">Independency in BN</a><ul><li><a href="#local-independency">Local Independency</a></li><li><a href="#global-independency">Global Independency</a><ul><li><a href="#三种结构">三种结构</a><ul><li><a href="#head-to-headcommon-evidence">head-to-head(Common Evidence)</a></li><li><a href="#tail-to-tailcommon-causev-structure">tail-to-tail(Common Cause/V structure)</a></li><li><a href="#head-to-tail">head-to-tail</a></li></ul></li></ul></li></ul></li><li><a href="#d-separation">D-separation</a></li></ul></li><li><a href="#贝叶斯网络的创建">贝叶斯网络的创建</a><ul><li><a href="#生成贝叶斯网络初始顺序的重要性">生成贝叶斯网络初始顺序的重要性</a></li><li><a href="#structure-learning">Structure Learning</a></li><li><a href="#parameter-learning">Parameter learning</a></li></ul></li></ul></li><li><a href="#causal-bayesian-network">Causal Bayesian Network</a><ul><li><a href="#实例">实例</a></li><li><a href="#贝叶斯网络模型在causal-inference时的局限性">贝叶斯网络模型在Causal Inference时的局限性</a><ul><li><a href="#马尔可夫等价类">马尔可夫等价类</a></li></ul></li><li><a href="#the-philosophy-behind-caual-bayesian-networks">The philosophy behind caual Bayesian Networks</a></li><li><a href="#causal-network的优越性">Causal network的优越性</a></li><li><a href="#causal-bayesian-network和bayesian-network区别">Causal Bayesian network和Bayesian network区别</a></li><li><a href="#definition-of-causal-bayesian-network">Definition of causal Bayesian network</a></li><li><a href="#properties-of-causal-bayesian-network">Properties of Causal Bayesian network</a></li><li><a href="#causal-relationship-and-their-stability">Causal relationship and their stability</a></li><li><a href="#一些概念">一些概念</a><ul><li><a href="#markov-blanket">Markov Blanket</a></li><li><a href="#markov-process">Markov Process</a></li><li><a href="#do操作符">do操作符</a></li></ul></li><li><a href="#backdoor-criteria">Backdoor Criteria</a><ul><li><a href="#什么是存在干扰">什么是存在干扰</a></li><li><a href="#引入backdoor-criteria的原因">引入Backdoor Criteria的原因</a></li><li><a href="#backdoor-path">Backdoor Path</a><ul><li><a href="#两种backdoor-path结构">两种backdoor path结构</a></li><li><a href="#unblocked-path-blocked-path">unblocked path / blocked path</a></li><li><a href="#berksons-paradox">Berkson’s paradox</a></li></ul></li><li><a href="#definition-of-backdoor-criterion">Definition of Backdoor criterion</a></li><li><a href="#backdoor-criterion-and-ignorability">Backdoor criterion and Ignorability</a></li></ul></li></ul></li></ul><!-- tocstop --><h1><span id="bayesian-network">Bayesian Network</span></h1><h2><span id="贝叶斯定理">贝叶斯定理</span></h2><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926372422123.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w447"></p><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926406771156.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w636"><br>参考链接：<a href="https://www.zhihu.com/question/19725590/answer/217025594" target="_blank" rel="noopener">https://www.zhihu.com/question/19725590/answer/217025594</a></p><h2><span id="引入贝叶斯网络的原因">引入贝叶斯网络的原因</span></h2><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/33860572" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33860572</a></p><blockquote><p>用于简化随机变量的联合概率分布的表现</p></blockquote><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926377253815.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w441"></p><p>贝叶斯网络（以及其他所有的概率图模型）相比于原始的联合分布模型，最大的优势在于增加了变量之间条件独立的先验信息，从而<strong>减小了模型的体积</strong>，与模型进行推断、学习的时间。例如，上图共有5个变量，如果用朴素的联合分布模型建模，条件概率表格的体积将会是 48 ，而采用贝叶斯网络后，条件概率表格的总体积为17 。</p><h2><span id="贝叶斯网络解决的问题">贝叶斯网络解决的问题</span></h2><ol><li>条件概率</li><li>最大后验概率</li></ol><h2><span id="贝叶斯网络的相关定义及特性">贝叶斯网络的相关定义及特性</span></h2><p>参考：Causality——Judea Pearl 2nd edition</p><h3><span id="markov-parents">Markov parents</span></h3><ol><li><p>定义：</p><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926378362656.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w554"></p><ul><li>即$PAi$是将$Xi$与其predecessor隔开的一组变量</li></ul></li><li><p>推论：DAG是贝叶斯网络的必要条件有：</p><ol><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926379743242.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w388"><ul><li>即每一个节点的概率只受其父节点的约束</li></ul></li></ol></li></ol><h3><span id="markov-compatibility">Markov Compatibility</span></h3><blockquote><p> If a probability function $P$ admits the factorization of (1.33) relative to DAG $G$, we say that $G$ represents $P$, that $G$ and $P$ are compatible, or that <strong>$P$ is Markov relative to $G$</strong>.</p></blockquote><ul><li>通过知道所有变量的conditional independency，就描绘与G compatible的概率分布</li></ul><blockquote><p>A convenient way of characterizing the set o f distributions compatible with a DAG G is to <strong>list the set of (conditional) independencies that each such distribution must sat­isfy</strong>. These independencies can be read off the DAG by using a graphical criterion called <strong>d-separation</strong></p></blockquote><h3><span id="parental-markov-condition">Parental Markov Condition</span></h3><ol><li>定义<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926679316940.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w446"></li></ul></li></ol><h3><span id="ordered-markov-condition">Ordered Markov Condition</span></h3><ol><li>定义<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926683169335.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w451"></li></ul></li><li>A consequence of this theorem is <strong>an order-independent criterion</strong>  for determining whether a given probability P is Markov relative to a given DAG G.<ul><li>order-independent：由于同一张联合分布概率表可能对应多张贝叶斯图，某一个节点的predecessor排列也有多种，无论predecessor的排列如何都，该节点都与所有的predecessor节点独立</li></ul></li></ol><h3><span id="observational-equivalence">Observational Equivalence</span></h3><ol><li>定义<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926700374377.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w449"></li></ul></li><li>Two networks that are <strong>observationally equivalent</strong> cannot be distinguished <strong>without resorting to manipulative experimentation</strong> or temporal information<ol><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926700806785.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w384"><ul><li>X3:Sprinkler,X2:Rain</li></ul></li><li>将X1，X2中间的箭头逆转，不会破坏原有的V-structure/引入新的V-structure；因此X2/X1中箭头两个方向是observational equivalent。因此，X1和X2之间箭头的方向不能由probabilistic info得出</li><li>若对X2-X4箭头方向调整，则会破坏一个原有的V结构，X4-X5之间箭头方向调整，则会产生一个新的V结构</li></ol></li></ol><blockquote><p>Thus, we see that some probability functions P (such as the one responsi­ ble for the construction of the Bayesian network in above pic), when unaccompanied by temporal information，can <strong>constrain the directionality of some arrows in the graph</strong>.</p></blockquote><h3><span id="techniques-for-calculation">Techniques for calculation</span></h3><ol><li>Message-passing architecture and Tree structure<ul><li>join-tree propagation:  decompose the network into clusters then form tree structure, each clusters is a compound variable that is capable of passing mes­sages to its neighbors<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926702453659.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w345"></li></ul></li></ul></li><li><strong>Cut-set conditioning method</strong>(不太理解)<ul><li>a set of variables is instantiated (given specific values) such that the remaining network forms a tree.The propagation is then performed on that tree, and a new instantiation chosen, until all instantiations have been exhausted; <strong>the results are then averaged</strong></li></ul></li></ol><h3><span id="independency-in-bn">Independency in BN</span></h3><p><strong>如何判断a与b的independency</strong>: 假如a发生变化，a变化的影响是否会传达到b</p><h4><span id="local-independency">Local Independency</span></h4><blockquote><p> Any variable in the network is independent of its non-descendents given its parents.<br>$$ (X \perp NonDesc(X) | Pa(X) $$where $ NonDesc(X) $ is the set of variables which are not descendents of $ X $ and $ Pa(X) $ is the set of variables which are parents of $ X $.</p></blockquote><h4><span id="global-independency">Global Independency</span></h4><h5><span id="三种结构">三种结构</span></h5><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/30139208" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30139208</a></p><h6><span id="head-to-headcommon-evidence">head-to-head(Common Evidence)</span></h6><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926386359550.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w248"></p><ol><li>c已知<ul><li>a产生变化，c不变，那么b也要发生变化，因此a、b不独立</li><li>有：<ul><li>P(a,b|c)= P(a,b,c)/P(c)=P(a)P(b)P(c|a,b)/P(c)</li><li>无法得到P(a,b|c)=P(a|c)P(b|c)</li></ul></li></ul></li><li>c未知<ul><li>a、b被阻断（blocked），条件独立</li><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926387353186.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w356"></li></ul></li></ol><h6><span id="tail-to-tailcommon-causev-structure">tail-to-tail(Common Cause/V structure)</span></h6><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926389037966.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w247"></p><ol><li>c已知<ul><li>有：<ul><li>P(a,b,c)=P(c)<em>P(a|c)</em>P(b|c)</li><li>P(a,b|c)=P(a|c)P(b|c)</li></ul></li><li>a/b仅取决于c，a⊥b｜c</li></ul></li><li>c未知<ul><li>无法得出P(a,b) = P(a)P(b)，即c未知时，a、b不独立。</li></ul></li></ol><h6><span id="head-to-tail">head-to-tail</span></h6><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926391726520.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w302"></p><ol><li>c已知<ul><li>a的变化不会影响c，c的变化会影响b，因此a⊥b｜c</li></ul></li><li>c未知<ul><li>The influence flows from $ A $ to $ B $ when $ C $ is not observed</li><li>有：<ul><li>P(a,b,c)=P(a)<em>P(c|a)</em>P(b|c)</li><li>但无法推出P(a,b) = P(a)P(b)</li><li>即c未知时，a、b不独立。</li></ul></li></ul></li><li>xi+1的分布状态只和xi有关，和其他变量条件独立，这种顺次演变的随机过程，就叫做<strong>马尔科夫链（Markov chain）</strong></li></ol><h3><span id="d-separation">D-separation</span></h3><p>为了回答<strong>给定一个随机变量的集合Z，随机变量A与B之间是否条件独立</strong>这个问题，我们需要引入d分隔的概念</p><ul><li><p>A、B间存在d分隔：某个节点集合C能d分隔节点A与节点B，当且仅当：给定C时，A与B之间<strong>不存在有效路径（active path/active trail）</strong>，即A、B被C隔断（blocked），A、B条件独立。</p><ul><li>Active Trail: 若A的变化可以影响B，则A和B中存在active trail </li></ul></li><li><p>A、B间存在d联结：不存在d分隔</p></li><li><p>例子：</p><p>  <img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926396060892.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w423"></p></li></ul><p>《Causality》中是这样定义的：<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926680828518.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w445"><br>例子：<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926681044665.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w397"></p><ul><li>粉色标记处：collider的子节点已知会使collider所在的path unlocked，即此时X会影响Y</li></ul><h2><span id="贝叶斯网络的创建">贝叶斯网络的创建</span></h2><h3><span id="生成贝叶斯网络初始顺序的重要性">生成贝叶斯网络初始顺序的重要性</span></h3><ul><li>在构建贝叶斯网络的时候，会收到变量初始状态的影响<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926695528684.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w457"></li></ul><h3><span id="structure-learning">Structure Learning</span></h3><ol><li><p>定义：</p><blockquote><p>The task of structure learning for Bayesian networks refers to <strong>learn the structure</strong> of the directed acyclic graph (DAG) <strong>from data</strong></p></blockquote></li><li><p>两种方式：</p><ul><li>score-based approach </li><li>constraint-based approach </li></ul></li></ol><h3><span id="parameter-learning">Parameter learning</span></h3><ol><li><p>定义 </p><blockquote><p>Parameter learning is the process of using data to <strong>learn the distributions</strong> of a Bayesian network or Dynamic Bayesian network.</p></blockquote><ul><li>Dynamic Bayesian network: 变量的概率分布会随时间发生变化<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926401957668.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w463"></li></ul></li><li>在贝叶斯参数学习里，认为模型的参数不是一个确定的值，而是一个随机变量，且满足一定的分布。<strong>贝叶斯参数学习的过程就是根据已知的数据集D来估计参数的概率分布，再用得到的参数概率分布来计算随机变量X的后验概率分布</strong>。</li></ul></li><li><p>complete data的方法</p><ol><li>极大似然估计MLE<ul><li>概率是通过参数，推测事实；似然是根据事实，推测参数</li><li>通过不断优化参数，使得一个事件发生的概率尽可能大Maximize{P((x1,x2,x3….)|参数)}<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926405152667.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w284"></li><li>为什么能变成连乘：因为MLE的独立同分布假设</li></ul></li><li>参考链接：<ul><li><a href="https://www.zhihu.com/question/24124998" target="_blank" rel="noopener">https://www.zhihu.com/question/24124998</a></li><li><a href="https://zhuanlan.zhihu.com/p/26614750" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26614750</a></li></ul></li></ul></li><li>贝叶斯估计<ul><li>参考链接：<a href="https://zhuanlan.zhihu.com/p/61593112" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/61593112</a><ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926409339661.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w511"><ul><li>通常我们取后验分布的期望作为参数的估计值</li></ul></li><li>最大后验估计MAP：<ul><li>参考链接：<a href="https://zhuanlan.zhihu.com/p/61593112" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/61593112</a></li><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926410276275.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w717"></li></ul></li></ul></li></ul></li></ol></li><li><p>incomplete data的方法</p><ol><li>Expectation-Maximization algorithm</li><li>Robust Bayesian estimate</li><li>Monte-Carlo Method</li><li>Gaussian approximation method</li></ol></li></ol><h1><span id="causal-bayesian-network">Causal Bayesian Network</span></h1><h2><span id="实例">实例</span></h2><p>肺癌分析实例： <a href="http://www.causality.inf.ethz.ch//data/LUCAS.html" target="_blank" rel="noopener">http://www.causality.inf.ethz.ch//data/LUCAS.html</a></p><h2><span id="贝叶斯网络模型在causal-inference时的局限性">贝叶斯网络模型在Causal Inference时的局限性</span></h2><p>局限性：贝叶斯网络本身<strong>无法区分出因果的方向</strong>。例如，A←B←C与A→B→C的因果方向完全相反，但在贝叶斯网络的模型描述下，它们<strong>表达的概率分布和条件独立假设完全相同</strong>。</p><ul><li>贝叶斯网络中，A→B未必等同于A导致B</li><li>概率论「给定/已知随机变量Z」里的「给定/已知」<strong>只能用于表达观察，而非介入</strong>（介入即产生激励/影响）。<ul><li>参考“介入主义因果观”，简而言之就是因是激励，果是响应</li><li><strong>因果关系是不可逆/非对称的，但是相关性是可逆/对称的</strong></li></ul></li></ul><h3><span id="马尔可夫等价类">马尔可夫等价类</span></h3><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926397039859.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w441"></p><h2><span id="the-philosophy-behind-caual-bayesian-networks">The philosophy behind caual Bayesian Networks</span></h2><blockquote><p>It seems that if conditional independence judgments are byproducts of stored causal relationships, then tapping and representing those relationships directly would be a more natural and more reliable way of expressing what we know or believe about the world. </p></blockquote><h2><span id="causal-network的优越性">Causal network的优越性</span></h2><ol><li>causal mod­els (assuming they are valid) are much more <strong>informative</strong> than probability models.<ol><li>A joint distribution tells us how probable events are and how probabilities would change with subsequent observations, but a causal model also tells us how these probabilities would change as a result of external interventions   </li></ol></li><li>模块性<ol><li>由于 parent-child 之间的稳定以及自治的物理机制. 在不改变其他变量之间分布的情况下, 单独改变一个 parent-child 之间的分布是有可能的 ( conceivable ) </li></ol></li></ol><h2><span id="causal-bayesian-network和bayesian-network区别">Causal Bayesian network和Bayesian network区别</span></h2><ol><li><strong>CBN中的操作是do/intervene，BN中的操作是observe，do可以得出直接因果关系，observe只能得出相关性</strong></li></ol><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926708137133.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w451"></p><h2><span id="definition-of-causal-bayesian-network">Definition of causal Bayesian network</span></h2><p>P($v$)是集合V上的概率分布<br>P$x$($v$)是定义在intervention do(X=$x$)上的概率分布<br><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926708906062.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w441"></p><ol><li>因果贝叶斯网络应该符合概率图模型的标准</li><li>对于干涉的部分，P(do(X=$x$))=1</li><li>被干涉变量的父节点的概率分布是不变的。（并且注意的一点:这里讲干涉的分布形式成功转换为了正常的概率分布形式）</li></ol><h2><span id="properties-of-causal-bayesian-network">Properties of Causal Bayesian network</span></h2><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926711948178.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w459"></p><ul><li>truncated factorization：justify the deletion procedure<ul><li>deletion：在causal network中，do(X)相当于把X与其predecessor全部断开</li></ul></li></ul><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926710523759.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w433"></p><ul><li>保证observe的condition probability和do操作的一致</li><li>为什么要一致呢？？</li></ul><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926710877480.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w450"></p><ul><li>控制了$Vi$的直接原因$PAi$（一组令Vi independent of its predecessor的变量）,那么剩下的变量就不会影响$Vi$的概率分布</li><li>只有$Vi$的descendants的概率分布会受到do操作的影响</li></ul><h2><span id="causal-relationship-and-their-stability">Causal relationship and their stability</span></h2><ol><li>为了检验$Xi$对$Xj$是否有causal influence，进行操作do(X=$Xi$)<ul><li>只有$Xi$的descendant会受到intervention的影响</li><li>计算P$xi$($Xj$), 看$Xj$的分布是否发生了变化，若发生了变化则说明$Xi$对$Xj$有causal influence</li></ul></li><li>causal relationship的稳定性<ul><li>因果关系是 ontological (存在论) 的, 即真实的因果关系不会根据环境(do-operator)的变化而变化. 即使我们队知识的认识(概率分布)发生了变化</li><li>概率关系是 epistemic (认识论) 的, 我们对事物的认识(概率分布)会随着环境的变化(do-operator)而变化</li></ul></li></ol><h2><span id="一些概念">一些概念</span></h2><h3><span id="markov-blanket">Markov Blanket</span></h3><ol><li>MB包括：all parents, children, and spouses of the target（X）</li><li>一个节点的MB：contains all the variables that shield the node from the rest of the network.</li><li>MB is the only knowledge needed to predict the behavior of that node and its children</li><li>例子：<img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926418193843.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w835"></li></ol><h3><span id="markov-process">Markov Process</span></h3><blockquote><p>a random process in which the future is independent of the past, given the present</p></blockquote><h3><span id="do操作符">do操作符</span></h3><p>do(X),相当于令x已知，将x与所有指向x的点断开</p><h2><span id="backdoor-criteria">Backdoor Criteria</span></h2><h3><span id="什么是存在干扰">什么是存在干扰</span></h3><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926653674927.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w458"></p><h3><span id="引入backdoor-criteria的原因">引入Backdoor Criteria的原因</span></h3><ul><li>为了便于在实验的时候选择控制变量，确定对哪些变量进行intervene<ul><li>在causal inference时，控制变量就是confounder（混淆变量）</li></ul></li><li>参考链接：<a href="https://blog.csdn.net/s1314_JHC/article/details/80790112" target="_blank" rel="noopener">https://blog.csdn.net/s1314_JHC/article/details/80790112</a><ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926656785543.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w720"></li></ul></li></ul><h3><span id="backdoor-path">Backdoor Path</span></h3><blockquote><p> $A$’s backdoor path is a <strong>non-causal path from $A$ to $Y$</strong>. They are “backdoor” paths because they flow backwards out of A: all of these paths point into A.</p></blockquote><ul><li>删除所有以A为起点的path(frontdoor path)后，保留的就是backdoor path</li><li>backdoor path里存在confounder</li></ul><h4><span id="两种backdoor-path结构">两种backdoor path结构</span></h4><ol><li>Common Causes<ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926659776902.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w247"></li><li>A是treatment，Y是outcome，X是confounder<ul><li>由于混淆表量confounder的存在，导致A-&gt;Y的因果关系受到影响   </li></ul></li></ul></li><li>M-bias<blockquote><p>This structure is typically used to represent a circumstance where a researcher <strong>observes T,Y,M(U,W unobserved)</strong></p><p>Clearly, <strong>the causal effect of T on Y is 0</strong> , which is also equal to the marginal association between T and Y</p><p>In order to test whether M is a confounder, one would ‘adjust M’, eg: including M in a regression or by matching units on similar values of M. Then the causal expectation between T &amp; Y is not 0. <strong>So M is a confounder</strong></p></blockquote></li></ol><ul><li><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926662438389.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w313"></li></ul><h4><span id="unblocked-path-blocked-path">unblocked path / blocked path</span></h4><p><img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926666744310.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w169"></p><ol><li>存在unblocked backdoor path，x未知，A和Y条件不独立，A和Y有两种关系<ul><li>$A$直接导致了$Y$(直接因果关系)</li><li>通过backdoor path，$A$对$Y$施加了影响</li></ul></li><li>存在blocked backdoor path，有两种情况<ol><li>control for or stratify a non-collider on that path,<ul><li>即已知X，A与Y条件独立</li></ul></li><li>backdoor path上存在collider，则这条路必blocked<br>  <img src="http://hellofromkira.oss-cn-beijing.aliyuncs.com/2020/06/21/15926669276786.jpg?x-oss-process=image/auto-orient,1/quality,q_90" alt="-w332"><ol><li>collider blocks the association between the variables that influence it.</li><li><strong>Condition on the collider opens the path between $X$ and $Y$,cause “Berkson’s paradox”</strong></li></ol></li></ol></li></ol><h4><span id="berksons-paradox">Berkson’s paradox</span></h4><ol><li><p>现象</p><blockquote><p>two values can statistically be negatively correlated even when they appear positively correlated in the population.</p></blockquote></li><li><p>产生原因</p><blockquote><p>caused by systematically observing some events more than others. If you know that X+Y must be within a certain range, then having a high X results in a lower Y, and vice versa.</p></blockquote><ul><li>X+Y 已知相当于上述的collider已知</li></ul></li><li><p>与confounder不一样！！confounder是在研究因果关系时的控制变量；而berkson paradox仅是一个现象</p></li></ol><h3><span id="definition-of-backdoor-criterion">Definition of Backdoor criterion</span></h3><blockquote><p>An effect of A on Y is identifiable if either:</p><ol><li>No backdoor paths from A to Y</li><li>Measured covariates are sufficient to block all backdoor paths from A to Y</li></ol><p>Backdoor criterion is powerful because it can check:</p><ol><li>if there is confounding given this DAG </li><li>if it is possible to removing the confounding</li><li>what variables to condition on to eliminate the confounding</li></ol></blockquote><ul><li>简而言之，backdoor criterion用于检测A到Y是否有直接的因果关系</li><li>借助backdoor criterion可以给已知DAG消歧，确定唯一的因果关系</li></ul><h3><span id="backdoor-criterion-and-ignorability">Backdoor criterion and Ignorability</span></h3><blockquote><p> Ignorability Assumption:</p><ul><li>no unmeasured confounders</li><li>no unblockable backdoor paths</li></ul><p>Suppose that we use the backdoor criterion and find that a set of variables X blocks all the backdoor paths. This implies the treatment assignment is conditionally <strong>ignorable</strong>: Y (a) ⫫A|X.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Causal Inference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/19/hello-world/"/>
      <url>/2020/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
